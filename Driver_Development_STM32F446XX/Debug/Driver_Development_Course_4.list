
Driver_Development_Course_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c28  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dec  08000dec  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dec  08000dec  00002020  2**0
                  CONTENTS
  4 .ARM          00000008  08000dec  08000dec  00001dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000df4  08000df4  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df4  08000df4  00001df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000df8  08000df8  00001df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08000dfc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000020  08000e1c  00002020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e1c  00002064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a19  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000064d  00000000  00000000  00003a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000040b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000165  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dda  00000000  00000000  000043f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000265a  00000000  00000000  000071cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000acbc  00000000  00000000  00009829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000144e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b4  00000000  00000000  00014528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00014bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000dd4 	.word	0x08000dd4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000dd4 	.word	0x08000dd4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx ,uint8_t State)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	@ (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
		{
				GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	@ 0x30
				else if(pGPIOx == GPIOH)
				{
						GPIOH_PCLK_DI();
				}
	}
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	@ (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
		    	GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	@ (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
		    	GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	@ (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
				GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	@ (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
				GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	@ (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
				GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	@ (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
				GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	@ (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
				GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
						GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOB)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
				    	GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOC)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	@ (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
				    	GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOD)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	@ (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
						GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOE)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	@ (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
						GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	@ (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
						GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOG)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	@ (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
						GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800036c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOH)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	@ (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
						GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000382:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	uint32_t temp =0;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
	//1. Configure the mode of GPIO pin
	//ENABLING THE CLOCK SO AS THE USER USES THIS FUNCTION HE NEED NOT TO ENABLE THE CLOCK EXPLICILTLY
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff24 	bl	8000214 <GPIO_PeriClockControl>
	if(pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode<=GPIO_MODE_ANALOG)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d81f      	bhi.n	8000414 <GPIO_Init+0x60>
	{
		temp = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);                    //clearing the bit
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	4619      	mov	r1, r3
 80003f2:	2303      	movs	r3, #3
 80003f4:	408b      	lsls	r3, r1
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp;                                                                    // setting the bit
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	e0c2      	b.n	800059a <GPIO_Init+0x1e6>

	}
	else
	{
		//this part is for the case of interrupt HANDLING
		if(pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	2b04      	cmp	r3, #4
 800041a:	d117      	bne.n	800044c <GPIO_Init+0x98>
		{
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 800041c:	4b47      	ldr	r3, [pc, #284]	@ (800053c <GPIO_Init+0x188>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7912      	ldrb	r2, [r2, #4]
 8000424:	4611      	mov	r1, r2
 8000426:	2201      	movs	r2, #1
 8000428:	408a      	lsls	r2, r1
 800042a:	4611      	mov	r1, r2
 800042c:	4a43      	ldr	r2, [pc, #268]	@ (800053c <GPIO_Init+0x188>)
 800042e:	430b      	orrs	r3, r1
 8000430:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber); //Clearing the corresponding rtsr bit
 8000432:	4b42      	ldr	r3, [pc, #264]	@ (800053c <GPIO_Init+0x188>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	43d2      	mvns	r2, r2
 8000442:	4611      	mov	r1, r2
 8000444:	4a3d      	ldr	r2, [pc, #244]	@ (800053c <GPIO_Init+0x188>)
 8000446:	400b      	ands	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
 800044a:	e035      	b.n	80004b8 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_IT_RT)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b05      	cmp	r3, #5
 8000452:	d117      	bne.n	8000484 <GPIO_Init+0xd0>
		{
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 8000454:	4b39      	ldr	r3, [pc, #228]	@ (800053c <GPIO_Init+0x188>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	4611      	mov	r1, r2
 8000464:	4a35      	ldr	r2, [pc, #212]	@ (800053c <GPIO_Init+0x188>)
 8000466:	430b      	orrs	r3, r1
 8000468:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber); //Clearing the corresponding rtsr bit
 800046a:	4b34      	ldr	r3, [pc, #208]	@ (800053c <GPIO_Init+0x188>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	43d2      	mvns	r2, r2
 800047a:	4611      	mov	r1, r2
 800047c:	4a2f      	ldr	r2, [pc, #188]	@ (800053c <GPIO_Init+0x188>)
 800047e:	400b      	ands	r3, r1
 8000480:	60d3      	str	r3, [r2, #12]
 8000482:	e019      	b.n	80004b8 <GPIO_Init+0x104>

		}
		else if(pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	2b06      	cmp	r3, #6
 800048a:	d115      	bne.n	80004b8 <GPIO_Init+0x104>
		{
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 800048c:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <GPIO_Init+0x188>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7912      	ldrb	r2, [r2, #4]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	4611      	mov	r1, r2
 800049c:	4a27      	ldr	r2, [pc, #156]	@ (800053c <GPIO_Init+0x188>)
 800049e:	430b      	orrs	r3, r1
 80004a0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber); //Clearing the corresponding rtsr bit
 80004a2:	4b26      	ldr	r3, [pc, #152]	@ (800053c <GPIO_Init+0x188>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a22      	ldr	r2, [pc, #136]	@ (800053c <GPIO_Init+0x188>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]

		}

		//2.configure the gpio port selection in syscfg_exticr
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber/4;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	089b      	lsrs	r3, r3, #2
 80004be:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber%4;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	f003 0303 	and.w	r3, r3, #3
 80004c8:	74bb      	strb	r3, [r7, #18]
		 uint8_t PortCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000540 <GPIO_Init+0x18c>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d045      	beq.n	8000560 <GPIO_Init+0x1ac>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000544 <GPIO_Init+0x190>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d02b      	beq.n	8000536 <GPIO_Init+0x182>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a19      	ldr	r2, [pc, #100]	@ (8000548 <GPIO_Init+0x194>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d024      	beq.n	8000532 <GPIO_Init+0x17e>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a17      	ldr	r2, [pc, #92]	@ (800054c <GPIO_Init+0x198>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d01d      	beq.n	800052e <GPIO_Init+0x17a>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a16      	ldr	r2, [pc, #88]	@ (8000550 <GPIO_Init+0x19c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d016      	beq.n	800052a <GPIO_Init+0x176>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <GPIO_Init+0x1a0>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d00f      	beq.n	8000526 <GPIO_Init+0x172>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <GPIO_Init+0x1a4>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d008      	beq.n	8000522 <GPIO_Init+0x16e>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a11      	ldr	r2, [pc, #68]	@ (800055c <GPIO_Init+0x1a8>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d101      	bne.n	800051e <GPIO_Init+0x16a>
 800051a:	2307      	movs	r3, #7
 800051c:	e021      	b.n	8000562 <GPIO_Init+0x1ae>
 800051e:	2300      	movs	r3, #0
 8000520:	e01f      	b.n	8000562 <GPIO_Init+0x1ae>
 8000522:	2306      	movs	r3, #6
 8000524:	e01d      	b.n	8000562 <GPIO_Init+0x1ae>
 8000526:	2305      	movs	r3, #5
 8000528:	e01b      	b.n	8000562 <GPIO_Init+0x1ae>
 800052a:	2304      	movs	r3, #4
 800052c:	e019      	b.n	8000562 <GPIO_Init+0x1ae>
 800052e:	2303      	movs	r3, #3
 8000530:	e017      	b.n	8000562 <GPIO_Init+0x1ae>
 8000532:	2302      	movs	r3, #2
 8000534:	e015      	b.n	8000562 <GPIO_Init+0x1ae>
 8000536:	2301      	movs	r3, #1
 8000538:	e013      	b.n	8000562 <GPIO_Init+0x1ae>
 800053a:	bf00      	nop
 800053c:	40013c00 	.word	0x40013c00
 8000540:	40020000 	.word	0x40020000
 8000544:	40020400 	.word	0x40020400
 8000548:	40020800 	.word	0x40020800
 800054c:	40020c00 	.word	0x40020c00
 8000550:	40021000 	.word	0x40021000
 8000554:	40021400 	.word	0x40021400
 8000558:	40021800 	.word	0x40021800
 800055c:	40021c00 	.word	0x40021c00
 8000560:	2300      	movs	r3, #0
 8000562:	747b      	strb	r3, [r7, #17]
		 SYSCFG_PCLK_EN();
 8000564:	4b66      	ldr	r3, [pc, #408]	@ (8000700 <GPIO_Init+0x34c>)
 8000566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000568:	4a65      	ldr	r2, [pc, #404]	@ (8000700 <GPIO_Init+0x34c>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1] = PortCode<<(4*temp2);
 8000570:	7c7a      	ldrb	r2, [r7, #17]
 8000572:	7cbb      	ldrb	r3, [r7, #18]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	fa02 f103 	lsl.w	r1, r2, r3
 800057a:	4a62      	ldr	r2, [pc, #392]	@ (8000704 <GPIO_Init+0x350>)
 800057c:	7cfb      	ldrb	r3, [r7, #19]
 800057e:	3302      	adds	r3, #2
 8000580:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.enable the exti interrupt delivery using IMR
         EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 8000584:	4b60      	ldr	r3, [pc, #384]	@ (8000708 <GPIO_Init+0x354>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	4611      	mov	r1, r2
 8000594:	4a5c      	ldr	r2, [pc, #368]	@ (8000708 <GPIO_Init+0x354>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]


	//2.configure the speed
	temp = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	461a      	mov	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	2303      	movs	r3, #3
 80005be:	408b      	lsls	r3, r1
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	400a      	ands	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6899      	ldr	r1, [r3, #8]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	430a      	orrs	r2, r1
 80005da:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]


//	3.configure the pull u  and pull down settings
	temp = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	79db      	ldrb	r3, [r3, #7]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68da      	ldr	r2, [r3, #12]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2303      	movs	r3, #3
 8000600:	408b      	lsls	r3, r1
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	400a      	ands	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68d9      	ldr	r1, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	430a      	orrs	r2, r1
 800061c:	60da      	str	r2, [r3, #12]
	temp =0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

//	4.configure the output type
	temp = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinOPType<<(pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7a1b      	ldrb	r3, [r3, #8]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4619      	mov	r1, r3
 800063e:	2301      	movs	r3, #1
 8000640:	408b      	lsls	r3, r1
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6859      	ldr	r1, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	605a      	str	r2, [r3, #4]
	temp=0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]

//	5. configure the gpio in alternate functionality mode
	if(pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_ALTFUN){
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d146      	bne.n	80006f8 <GPIO_Init+0x344>
		//configure the alternate function registers.
		uint8_t temp1 , temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber/8;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber%8;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	73fb      	strb	r3, [r7, #15]
		if(temp1 ==1)
 800067c:	7c3b      	ldrb	r3, [r7, #16]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d11d      	bne.n	80006be <GPIO_Init+0x30a>
		{
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF<<(4*temp2));
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	210f      	movs	r1, #15
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43db      	mvns	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	400a      	ands	r2, r1
 800069c:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig_t.GPIO_PinAltFunMode<<(4*temp2));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7a5b      	ldrb	r3, [r3, #9]
 80006a8:	4619      	mov	r1, r3
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	4619      	mov	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	625a      	str	r2, [r3, #36]	@ 0x24
		}

	}


}
 80006bc:	e01c      	b.n	80006f8 <GPIO_Init+0x344>
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF<<(4*temp2));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6a1a      	ldr	r2, [r3, #32]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	210f      	movs	r1, #15
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig_t.GPIO_PinAltFunMode<<(4*temp2));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6a1a      	ldr	r2, [r3, #32]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7a5b      	ldrb	r3, [r3, #9]
 80006e4:	4619      	mov	r1, r3
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	621a      	str	r2, [r3, #32]
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40013800 	.word	0x40013800
 8000708:	40013c00 	.word	0x40013c00

0800070c <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR  >> PinNumber)& 0x00000001);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
	return value;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <I2C_PeriClockControl>:
/*
 * Peripheral Clock Setup
*/

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx ,uint8_t State)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE){
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d120      	bne.n	800078c <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <I2C_PeriClockControl+0xa0>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800075c:	6413      	str	r3, [r2, #64]	@ 0x40
				else if(pI2Cx == I2C3)
				{
					I2C3_PCLK_DI();
				}
	}
}
 800075e:	e035      	b.n	80007cc <I2C_PeriClockControl+0x94>
		else if(pI2Cx== I2C2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a1f      	ldr	r2, [pc, #124]	@ (80007e0 <I2C_PeriClockControl+0xa8>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a1b      	ldr	r2, [pc, #108]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 800076e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000774:	e02a      	b.n	80007cc <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a1a      	ldr	r2, [pc, #104]	@ (80007e4 <I2C_PeriClockControl+0xac>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d126      	bne.n	80007cc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 8000784:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800078a:	e01f      	b.n	80007cc <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <I2C_PeriClockControl+0xa0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <I2C_PeriClockControl+0x6a>
					I2C1_PCLK_DI();
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 800079a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007a0:	e014      	b.n	80007cc <I2C_PeriClockControl+0x94>
				else if(pI2Cx== I2C2)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <I2C_PeriClockControl+0xa8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <I2C_PeriClockControl+0x80>
					I2C2_PCLK_DI();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 80007b0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007b6:	e009      	b.n	80007cc <I2C_PeriClockControl+0x94>
				else if(pI2Cx == I2C3)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <I2C_PeriClockControl+0xac>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <I2C_PeriClockControl+0x94>
					I2C3_PCLK_DI();
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <I2C_PeriClockControl+0xa4>)
 80007c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40005400 	.word	0x40005400
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40005800 	.word	0x40005800
 80007e4:	40005c00 	.word	0x40005c00

080007e8 <I2C_Init>:

/*
 * Init and De-Init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

   uint32_t tempreg =0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
   //Enable the clock
   I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff9c 	bl	8000738 <I2C_PeriClockControl>
   //ack control bit for mainly enabling and disabling the ACK's
   tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl <<10;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	029b      	lsls	r3, r3, #10
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	4313      	orrs	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
   pI2CHandle->pI2Cx->CR1=tempreg;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	601a      	str	r2, [r3, #0]

   //configure the freq feild of cr2
   tempreg =0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
   tempreg |= RCC_GetPclk1Value()/1000000U;
 8000818:	f000 f99c 	bl	8000b54 <RCC_GetPclk1Value>
 800081c:	4603      	mov	r3, r0
 800081e:	4a46      	ldr	r2, [pc, #280]	@ (8000938 <I2C_Init+0x150>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	0c9b      	lsrs	r3, r3, #18
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
   pI2CHandle->pI2Cx->CR2 = (tempreg&0x3F);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000836:	605a      	str	r2, [r3, #4]

   //program the device slave address
   tempreg =0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
   tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a1b      	ldrb	r3, [r3, #8]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
   tempreg |= (1<<14);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084e:	60fb      	str	r3, [r7, #12]
   pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	609a      	str	r2, [r3, #8]

   //CCR CALCULATION
   uint16_t  ccr_value;
   tempreg = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
   if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a36      	ldr	r2, [pc, #216]	@ (800093c <I2C_Init+0x154>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d80f      	bhi.n	8000886 <I2C_Init+0x9e>
   {
   //speed mode is standard mode
   ccr_value = RCC_GetPclk1Value()/(2* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000866:	f000 f975 	bl	8000b54 <RCC_GetPclk1Value>
 800086a:	4602      	mov	r2, r0
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	817b      	strh	r3, [r7, #10]
   tempreg |= (ccr_value & 0xFFF);
 8000878:	897b      	ldrh	r3, [r7, #10]
 800087a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	4313      	orrs	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e02c      	b.n	80008e0 <I2C_Init+0xf8>
   }
   else
   {
	  //speed mode is fast mode
	   tempreg |= (1<<15);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800088c:	60fb      	str	r3, [r7, #12]
	   tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	895b      	ldrh	r3, [r3, #10]
 8000892:	039b      	lsls	r3, r3, #14
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4313      	orrs	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
	   if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	895b      	ldrh	r3, [r3, #10]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10b      	bne.n	80008ba <I2C_Init+0xd2>
	   {
		   ccr_value = RCC_GetPclk1Value()/(3* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80008a2:	f000 f957 	bl	8000b54 <RCC_GetPclk1Value>
 80008a6:	4601      	mov	r1, r0
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80008b6:	817b      	strh	r3, [r7, #10]
 80008b8:	e00c      	b.n	80008d4 <I2C_Init+0xec>

	   }
	   else
	   {
		   ccr_value = RCC_GetPclk1Value()/(25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80008ba:	f000 f94b 	bl	8000b54 <RCC_GetPclk1Value>
 80008be:	4601      	mov	r1, r0
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	009a      	lsls	r2, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80008d2:	817b      	strh	r3, [r7, #10]

	   }
	   tempreg |= (ccr_value & 0xFFF);
 80008d4:	897b      	ldrh	r3, [r7, #10]
 80008d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

   }
   pI2CHandle->pI2Cx->CCR = tempreg;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	61da      	str	r2, [r3, #28]

   //Trise calculations
   if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	4a13      	ldr	r2, [pc, #76]	@ (800093c <I2C_Init+0x154>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d809      	bhi.n	8000906 <I2C_Init+0x11e>
   {
	   //mode is standard

	  tempreg = (RCC_GetPclk1Value()/1000000U)+1;
 80008f2:	f000 f92f 	bl	8000b54 <RCC_GetPclk1Value>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <I2C_Init+0x150>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e00d      	b.n	8000922 <I2C_Init+0x13a>
   }
   else
   {
	//mode is fast mode
	   tempreg = ((RCC_GetPclk1Value()*300)/1000000000U)+1;
 8000906:	f000 f925 	bl	8000b54 <RCC_GetPclk1Value>
 800090a:	4603      	mov	r3, r0
 800090c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	0a5b      	lsrs	r3, r3, #9
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <I2C_Init+0x158>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	09db      	lsrs	r3, r3, #7
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
   }
   pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800092c:	621a      	str	r2, [r3, #32]

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	431bde83 	.word	0x431bde83
 800093c:	000186a0 	.word	0x000186a0
 8000940:	00044b83 	.word	0x00044b83

08000944 <I2C_MasterSendData>:
/*
 * Data Send and Receive
*/

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle , uint8_t *pTxBuffer , uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	70fb      	strb	r3, [r7, #3]
	//Steps to be followed
	//1.generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f872 	bl	8000a40 <I2C_GenerateStartCondition>

	//2. confirm the start generation is completed by checking the SB flag in SR1
	//Note: Until The SB bit is cleared the clock will be stretched
    while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 800095c:	bf00      	nop
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2101      	movs	r1, #1
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f8d8 	bl	8000b1a <I2C_GetFlagStatus>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f6      	beq.n	800095e <I2C_MasterSendData+0x1a>
//	while(!pI2CHandle->pI2Cx->SR1 & (0x01) );

    //3.Send the address of the slave with r/w bit set to w(0) (total 8 bits)
    I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx ,SlaveAddr);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	78fa      	ldrb	r2, [r7, #3]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f871 	bl	8000a60 <I2C_ExecuteAddressPhaseWrite>

    //4. Confirm the address phase is completed by checking the addr flag in the sr1
    while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800097e:	bf00      	nop
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f8c7 	bl	8000b1a <I2C_GetFlagStatus>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f6      	beq.n	8000980 <I2C_MasterSendData+0x3c>

    //5.clear the addr flag according to it's software sequence
    //Note: Until addr is cleared scl will be stretched (pulled to low)
    I2C_ClearADDRFlag(pI2CHandle);
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f000 f87a 	bl	8000a8c <I2C_ClearADDRFlag>

    //6. send data until length becomes 0
    while(Len>0)
 8000998:	e013      	b.n	80009c2 <I2C_MasterSendData+0x7e>
    {
    	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))//checking whether txe is set or not
    	{
    		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	611a      	str	r2, [r3, #16]
    		pTxBuffer++;
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
    		Len--;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
    	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))//checking whether txe is set or not
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8af 	bl	8000b1a <I2C_GetFlagStatus>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0eb      	beq.n	800099a <I2C_MasterSendData+0x56>
    while(Len>0)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f3      	bne.n	80009b0 <I2C_MasterSendData+0x6c>
    }

       //7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
      // Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
     //when BTF=1 SCL will be stretched (pulled to LOW)
    while(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 80009c8:	bf00      	nop
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f8a2 	bl	8000b1a <I2C_GetFlagStatus>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f6      	bne.n	80009ca <I2C_MasterSendData+0x86>

    while(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80009dc:	bf00      	nop
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2104      	movs	r1, #4
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f898 	bl	8000b1a <I2C_GetFlagStatus>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f6      	bne.n	80009de <I2C_MasterSendData+0x9a>

    //8.generate the stop condition and master need not to wait for the completion of stop condition
    //note: generating the stop , automatically clears the btf
    if(Sr == DISABLE)
 80009f0:	7e3b      	ldrb	r3, [r7, #24]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d104      	bne.n	8000a00 <I2C_MasterSendData+0xbc>
    {
    I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f87d 	bl	8000afa <I2C_GenerateStopCondition>
    }

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <I2C_ManageAcking>:




void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t State)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
  if(State == I2C_ACK_ENABLE)
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d106      	bne.n	8000a28 <I2C_ManageAcking+0x20>
  {
	//Enable the Macro
	pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
  else
  {
	//Disable the Macro
	  pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
  }
}
 8000a26:	e005      	b.n	8000a34 <I2C_ManageAcking+0x2c>
	  pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	//generates the start
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]

}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t* pI2Cx ,uint8_t SlaveAddr)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr<<1;  // salve address is shifted by 1 position as it includes the read/ write bit
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);         // slave address = slave address + r/w
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a7a:	78fa      	ldrb	r2, [r7, #3]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	611a      	str	r2, [r3, #16]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <I2C_ClearADDRFlag>:
	SlaveAddr = SlaveAddr<<1;  // salve address is shifted by 1 position as it includes the read/ write bit
	SlaveAddr |= 1;           // slave address = slave address + r/w
	pI2Cx->DR = SlaveAddr;
}
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
   //check for the device mode
	if(pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_MSL))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01f      	beq.n	8000ae2 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7f1b      	ldrb	r3, [r3, #28]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d112      	bne.n	8000ad0 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d11f      	bne.n	8000af2 <I2C_ClearADDRFlag+0x66>
			{
				//disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffa5 	bl	8000a08 <I2C_ManageAcking>

				//clear the addr flag(read sr1 , read sr2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;

	}
}
 8000ace:	e010      	b.n	8000af2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	60fb      	str	r3, [r7, #12]
}
 8000ae0:	e007      	b.n	8000af2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	60fb      	str	r3, [r7, #12]
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  pI2Cx->CR1 |=(1<< I2C_CR1_STOP);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <I2C_GetFlagStatus>:
			pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
		}

}
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
   if(pI2Cx->SR1 & FlagName)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <I2C_GetFlagStatus+0x1a>
   {
	   return FLAG_SET;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <I2C_GetFlagStatus+0x1c>
   }
   return FLAG_RESET;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <RCC_GetOutputClock>:


uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};
uint32_t RCC_GetOutputClock(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
   return 0;
 8000b46:	2300      	movs	r3, #0

}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <RCC_GetPclk1Value>:

uint32_t RCC_GetPclk1Value(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1;
	clksrc = (RCC->CFGR >>2)&0x03;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <RCC_GetPclk1Value+0xa0>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 8000b68:	7a7b      	ldrb	r3, [r7, #9]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <RCC_GetPclk1Value+0x20>
	{
		SystemClk = 16000000;
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <RCC_GetPclk1Value+0xa4>)
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e00b      	b.n	8000b8c <RCC_GetPclk1Value+0x38>
	}
	else if(clksrc == 1)
 8000b74:	7a7b      	ldrb	r3, [r7, #9]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d102      	bne.n	8000b80 <RCC_GetPclk1Value+0x2c>
	{
		SystemClk = 8000000;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <RCC_GetPclk1Value+0xa8>)
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	e005      	b.n	8000b8c <RCC_GetPclk1Value+0x38>
	}
	else if(clksrc == 2)
 8000b80:	7a7b      	ldrb	r3, [r7, #9]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d102      	bne.n	8000b8c <RCC_GetPclk1Value+0x38>
	{
		SystemClk = RCC_GetOutputClock(); //for pll case
 8000b86:	f7ff ffdc 	bl	8000b42 <RCC_GetOutputClock>
 8000b8a:	60f8      	str	r0, [r7, #12]
	}
	//for AHB Prescaler
	temp = (RCC->CFGR >>4)&0x0F;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <RCC_GetPclk1Value+0xa0>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f003 030f 	and.w	r3, r3, #15
 8000b98:	723b      	strb	r3, [r7, #8]
	if(temp<8)
 8000b9a:	7a3b      	ldrb	r3, [r7, #8]
 8000b9c:	2b07      	cmp	r3, #7
 8000b9e:	d802      	bhi.n	8000ba6 <RCC_GetPclk1Value+0x52>
	{
		ahbp = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	72fb      	strb	r3, [r7, #11]
 8000ba4:	e005      	b.n	8000bb2 <RCC_GetPclk1Value+0x5e>
	}
	else
	{
			ahbp = AHB_PreScaler[temp-8];
 8000ba6:	7a3b      	ldrb	r3, [r7, #8]
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	4a15      	ldr	r2, [pc, #84]	@ (8000c00 <RCC_GetPclk1Value+0xac>)
 8000bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb0:	72fb      	strb	r3, [r7, #11]
	}
	//for apb1 prescaler
	temp =(RCC->CFGR>>10)&0x7;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <RCC_GetPclk1Value+0xa0>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	0a9b      	lsrs	r3, r3, #10
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	723b      	strb	r3, [r7, #8]
	if(temp<4)
 8000bc0:	7a3b      	ldrb	r3, [r7, #8]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d802      	bhi.n	8000bcc <RCC_GetPclk1Value+0x78>
	{
		apb1 = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	72bb      	strb	r3, [r7, #10]
 8000bca:	e005      	b.n	8000bd8 <RCC_GetPclk1Value+0x84>
	}
	else{
		apb1 = APB1_PreScaler[temp-4];
 8000bcc:	7a3b      	ldrb	r3, [r7, #8]
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <RCC_GetPclk1Value+0xb0>)
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	72bb      	strb	r3, [r7, #10]
	}
	pclk1 = (SystemClk/ahbp)/apb1;
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000be0:	7abb      	ldrb	r3, [r7, #10]
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000be8:	687b      	ldr	r3, [r7, #4]

}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	00f42400 	.word	0x00f42400
 8000bfc:	007a1200 	.word	0x007a1200
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000010 	.word	0x20000010

08000c08 <Delay>:
//pb6: i2c1 sclk
//pb7: i2c1_sda
I2C_Handle_t  I2C1Handle;
uint8_t some_data[] = "hello";
void Delay(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2 ; i++);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e002      	b.n	8000c1a <Delay+0x12>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <Delay+0x28>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d9f8      	bls.n	8000c14 <Delay+0xc>
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	0003d08f 	.word	0x0003d08f

08000c34 <btn_gpio_inits>:
void btn_gpio_inits(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioBtn;
    GpioBtn.pGPIOx = GPIOC;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <btn_gpio_inits+0x2c>)
 8000c3c:	607b      	str	r3, [r7, #4]
  	GpioBtn.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	727b      	strb	r3, [r7, #9]
  	GpioBtn.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_13;
 8000c42:	230d      	movs	r3, #13
 8000c44:	723b      	strb	r3, [r7, #8]
  	GpioBtn.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c46:	2302      	movs	r3, #2
 8000c48:	72bb      	strb	r3, [r7, #10]
  	GpioBtn.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	72fb      	strb	r3, [r7, #11]
//	GPIO_PeriClockControl(GPIOC,ENABLE);
	GPIO_Init(&GpioBtn);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fbaf 	bl	80003b4 <GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020800 	.word	0x40020800

08000c64 <I2C1_GPIO_Inits>:

void I2C1_GPIO_Inits(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <I2C1_GPIO_Inits+0x40>)
 8000c6c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig_t.GPIO_PinAltFunMode = 4;
 8000c72:	2304      	movs	r3, #4
 8000c74:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig_t.GPIO_PinOPType  = GPIO_OP_TYPE_OD;
 8000c76:	2301      	movs	r3, #1
 8000c78:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	72bb      	strb	r3, [r7, #10]

	//sclk
	I2CPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_6;
 8000c82:	2306      	movs	r3, #6
 8000c84:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fb93 	bl	80003b4 <GPIO_Init>

	//SDA

	I2CPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_7;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb8d 	bl	80003b4 <GPIO_Init>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <I2C1_Inits>:
void I2C1_Inits(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <I2C1_Inits+0x2c>)
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <I2C1_Inits+0x30>)
 8000cb0:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <I2C1_Inits+0x2c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0X61;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <I2C1_Inits+0x2c>)
 8000cba:	2261      	movs	r2, #97	@ 0x61
 8000cbc:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <I2C1_Inits+0x2c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <I2C1_Inits+0x2c>)
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <I2C1_Inits+0x34>)
 8000cc8:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1Handle);
 8000cca:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <I2C1_Inits+0x2c>)
 8000ccc:	f7ff fd8c 	bl	80007e8 <I2C_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000003c 	.word	0x2000003c
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	000186a0 	.word	0x000186a0

08000ce0 <main>:
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af02      	add	r7, sp, #8
	btn_gpio_inits();
 8000ce6:	f7ff ffa5 	bl	8000c34 <btn_gpio_inits>
    I2C1_GPIO_Inits();
 8000cea:	f7ff ffbb 	bl	8000c64 <I2C1_GPIO_Inits>
    I2C1_Inits();
 8000cee:	f7ff ffdb 	bl	8000ca8 <I2C1_Inits>
    I2C_PeriClockControl(I2C1, ENABLE);
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <main+0x48>)
 8000cf6:	f7ff fd1f 	bl	8000738 <I2C_PeriClockControl>
    while(1){
    while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_13));
 8000cfa:	bf00      	nop
 8000cfc:	210d      	movs	r1, #13
 8000cfe:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <main+0x4c>)
 8000d00:	f7ff fd04 	bl	800070c <GPIO_ReadFromInputPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f8      	bne.n	8000cfc <main+0x1c>

    Delay();
 8000d0a:	f7ff ff7d 	bl	8000c08 <Delay>
    I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data),0x61,DISABLE);
 8000d0e:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <main+0x50>)
 8000d10:	f7ff fa78 	bl	8000204 <strlen>
 8000d14:	4602      	mov	r2, r0
 8000d16:	2300      	movs	r3, #0
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2361      	movs	r3, #97	@ 0x61
 8000d1c:	4904      	ldr	r1, [pc, #16]	@ (8000d30 <main+0x50>)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <main+0x54>)
 8000d20:	f7ff fe10 	bl	8000944 <I2C_MasterSendData>
    while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_13));
 8000d24:	e7e9      	b.n	8000cfa <main+0x1a>
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	20000018 	.word	0x20000018
 8000d34:	2000003c 	.word	0x2000003c

08000d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d66:	f000 f811 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff ffb9 	bl	8000ce0 <main>

08000d6e <LoopForever>:

LoopForever:
  b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d7c:	08000dfc 	.word	0x08000dfc
  ldr r2, =_sbss
 8000d80:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d84:	20000064 	.word	0x20000064

08000d88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000dc4 <__libc_init_array+0x38>)
 8000d90:	4c0d      	ldr	r4, [pc, #52]	@ (8000dc8 <__libc_init_array+0x3c>)
 8000d92:	1b64      	subs	r4, r4, r5
 8000d94:	10a4      	asrs	r4, r4, #2
 8000d96:	2600      	movs	r6, #0
 8000d98:	42a6      	cmp	r6, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000dcc <__libc_init_array+0x40>)
 8000d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000dd0 <__libc_init_array+0x44>)
 8000da0:	f000 f818 	bl	8000dd4 <_init>
 8000da4:	1b64      	subs	r4, r4, r5
 8000da6:	10a4      	asrs	r4, r4, #2
 8000da8:	2600      	movs	r6, #0
 8000daa:	42a6      	cmp	r6, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db4:	4798      	blx	r3
 8000db6:	3601      	adds	r6, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dbe:	4798      	blx	r3
 8000dc0:	3601      	adds	r6, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000df4 	.word	0x08000df4
 8000dc8:	08000df4 	.word	0x08000df4
 8000dcc:	08000df4 	.word	0x08000df4
 8000dd0:	08000df8 	.word	0x08000df8

08000dd4 <_init>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr

08000de0 <_fini>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr
